package com.expanz.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;

import com.expanz.ExpanzCommand;
import com.expanz.ServiceCallback;
import com.expanz.app.data.ListSimpleAdapterEx;
import com.expanz.model.Message;
import com.expanz.model.entity.Activities;
import com.expanz.model.entity.ImageDetails;
import com.expanz.model.request.ActivityRequest;
import com.expanz.model.request.ContextRequest;
import com.expanz.model.request.CreateActivityRequest;
import com.expanz.model.request.CreateSessionRequest;
import com.expanz.model.request.DataPublicationRequest;
import com.expanz.model.request.GetSessionDataRequest;
import com.expanz.model.request.MenuActionRequest;
import com.expanz.model.request.MethodRequest;
import com.expanz.model.response.ActivityRequestResponse;
import com.expanz.model.response.ActivityResponse;
import com.expanz.model.response.ContextMenuResponse;
import com.expanz.model.response.DataRow;
import com.expanz.model.response.FieldResponse;
import com.expanz.model.response.MenuItemResponse;
import com.expanz.model.response.ProcessAreaActivityResponse;
import com.expanz.model.response.ProcessAreaResponse;
import com.expanz.model.response.SessionResponse;
import com.expanz.util.ActivityMapping;
import com.expanz.util.ActivityMappingHolder;
import com.expanz.util.ImageCaptureAgent;
import com.expanz.webservice.ActivityHandler;
import com.expanz.widget.EditTextEx;
import com.expanz.widget.ExpanzFieldWidget;
import com.expanz.widget.TextViewEx;

/**
 * Base class for all list based Expanz (Android) Activities. 
 * Subclasses of this class should be generated by an IDE and should contain minimal code.
 * 
 */
public abstract class ListActivityEx extends ListActivity implements
		MessageListener, ContextEx {
	
	/**
	 * Constant for camera integration activity result
	 */
	private static final int TAKE_PICTURE = 1;
	
	/**
	 * defines what type of default message display is utilized by this activity
	 */
	private int messageHandlerType = 2;
	
	/**
	 * the expanz activity associated with this android activity
	 */
	protected String activityHandle;
	
	/**
	 * the expanz session this activity belongs to
	 */
	protected String sessionHandle;
	
	/**
	 * Label for the field widgets, needs to be separate as same field id is used for widget and label
	 */
	private Map<String, List<TextViewEx>> fieldLabels = new HashMap<String, List<TextViewEx>>();
	
	/**
	 * any field widget views that exists as a child of the root view for this activity
	 */
	private Map<String, List<ExpanzFieldWidget>> fieldWidgets = new HashMap<String, List<ExpanzFieldWidget>>();
		
	/**
	 * the mappings for menu items
	 */
	private List<ActivityMapping> mappings = new ArrayList<ActivityMapping>();
	
	/**
	 * The Activity specific data generated from tooling
	 */
	protected ActivityMapping mapping;

	/**
	 * for context menu pertaining to a given row
	 */
	private ContextMenuResponse contextMenu;
	
	/**
	 * the headers and footers of the listview, used so we can dynamically 
	 * populate headers and footers with data from expanz server
	 */
	private List<View> headers = new ArrayList<View>();
	
	/**
	 * the headers and footers of the listview, used so we can dynamically 
	 * populate headers and footers with data from expanz server
	 */
	private List<View> footers = new ArrayList<View>();
	
	/**
	 * Used for lookup of the xml content for the activity
	 */
	private Uri activityUri;
	
	/**
	 * store any properties between activity 
	 */
	private SharedPreferences mPrefs;
	
	/**
	 * the name of the expanz activity, e.g. ESA.Sales.SalesOrder
	 */
	private String activityName;
	
	/**
	 * Is this a newly created android activity, used so we don't recreate an 
	 * activity if the phone orientation is changed etc. 
	 */
	private boolean isNew = true;

	/**
	 * Send images to the server via camera intent.
	 */
	private ImageCaptureAgent imageCaptureAgent;
	
	/**
	 * Fields contained in each row, used for mask optimization
	 */
	private Set<String> rowFields = new HashSet<String>();
	

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mPrefs = getSharedPreferences("expanz", MODE_PRIVATE);

		sessionHandle = getIntent().getStringExtra(ExpanzConstants.SESSION_HANDLE);
		
		registerForContextMenu(getListView());
		
		if(getIntent().getStringExtra(ExpanzConstants.ACTIVITY_HANDLE) != null) {
			activityHandle = getIntent().getStringExtra(ExpanzConstants.ACTIVITY_HANDLE);
		}
		
		//TODO need to invalidate when session/activity times out, i.e. isNew = true
		if(savedInstanceState != null && savedInstanceState.getBoolean(ExpanzConstants.NOT_NEW)) {
			isNew = false;
		} 
		
		loadMapping();

	}
	
	/**
	 * Get the field labels used in this activity
	 */
	public Map<String, List<TextViewEx>> getFieldLabels() {
		return fieldLabels;
	}

	/**
	 * Get the field widgets used in this activity
	 */
	public Map<String, List<ExpanzFieldWidget>> getFieldWidgets() {
		return fieldWidgets;
	}
	
	/**
	 * Get a reference to this object, used for anonymous inner classes etc
	 * 
	 * @return this ref
	 */
	private Context getContextRef() {
		return this;
	}
	
	/**
	 * Set the state of the current activity object with configuration data, from the tooling
	 */
	protected void loadMapping() {
		
		mapping = ActivityMappingHolder.getInstance().getByForm(this.getClass().getName());

		if(mapping.getListHeaders() != null && mapping.getListHeaders().size() > 0) {
			
			for(Integer headerId : mapping.getListHeaders()) {
				addHeader(headerId);
			}
			
		}
		
		if(mapping.getListFooters() != null && mapping.getListFooters().size() > 0) {
			
			for(Integer footerId : mapping.getListFooters()) {
				addFooter(footerId);
			}
			
		}
		
		if(mapping.getMessageHandlerType() != null) {
			setMessageHandlerType(mapping.getMessageHandlerType());
		}
		
		View rowView = getLayoutInflater().inflate(mapping.getListView(), null, true);
		
		recurseRowView(rowView);
		
		createMenu();

		initFields();

		if(mapping.isCreateActivity()) {
			
			createListActivity(mapping.getExpanzActivityName(), mapping.getStyle(), mapping.getPublications());
			
		}
		
		
	}

	/**
	 * Persists activity state etc
	 */
	@Override
	protected void onPause() {
		
		if(activityUri != null) {
			SharedPreferences.Editor editor = mPrefs.edit();
			editor.putString(ExpanzConstants.ACTIVITY_URI, activityUri.toString());
			editor.commit();
		}
		
		super.onPause();
	}

	/**
	 * Save state of activity
	 */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		outState.putBoolean(ExpanzConstants.NOT_NEW, true);
		super.onSaveInstanceState(outState);
	}
	
	/**
	 * Load the activity state from the db, i.e. rather than call createActivity
	 * 
	 * @param activityName
	 * @return
	 */
	protected ActivityResponse loadActivity(String activityName) {
		
		this.activityName = activityName;
		ActivityResponse activity = null;
		
		String activityUriString = getIntent().getStringExtra(ExpanzConstants.TRANSITION_URI);
		
		if(activityUriString == null) {
			activityUriString = mPrefs.getString(ExpanzConstants.ACTIVITY_URI, null);
		}
		
		if(activityUriString != null) {
			
			activityUri = Uri.parse(activityUriString);
			
			Cursor cursor = managedQuery(activityUri,
					new String[] { Activities.ActivityEntity.PAYLOAD }, 
					null, null, null);
			
			if(cursor.moveToFirst()) {
				
				String payload = cursor.getString(cursor.getColumnIndex(Activities.ActivityEntity.PAYLOAD));
				
				if(payload != null) {
					ActivityHandler handler = new ActivityHandler();
					activity = handler.parse(payload);
					initFields(activity);
				}
				
			}
			
		}
		
		return activity;
		
	}
	
	/**
	 * Set up any field etc
	 * 
	 * @param activity
	 */
	private void initFields(ActivityResponse activity) {
		
		TextViewEx title = (TextViewEx) fieldWidgets.get("activitytitle");
		
		activityUri = activity.getUri();
		
		if(title != null) {
			title.setText(activity.getTitle());
		}
		
		for(FieldResponse field : activity.getFields()) {
			
			if (fieldLabels.get(field.getId()) != null) {
				for (TextViewEx label : fieldLabels.get(field.getId())) {
					label.setText(label.isUseValue() ? field.getValue() : field
							.getLabel());
				}
			}
			
			List<ExpanzFieldWidget> widgets = fieldWidgets.get(field.getId());

			if (widgets != null) {

				for (ExpanzFieldWidget widget : widgets) {
					
					widget.setField(field);
				}

			}
			
		}
		
		activityHandle = activity.getHandle();
		
		if(activity.hasMessage()) {
			displayMessages(activity.getMessages());
		}
	}

	/**
	 * the handle for the "expanz" activity associated with this android activity 
	 * 
	 * @return
	 */
	public String getActivityHandle() {
		return activityHandle;
	}

	public void setActivityHandle(String activityHandle) {
		this.activityHandle = activityHandle;
	}

	/**
	 * The handle of the current expanz session
	 * 
	 * @return
	 */
	public String getSessionHandle() {
		return sessionHandle;
	}

	/**
	 * Create an activity with the specified name
	 * 
	 * @param activityName
	 */
	protected void createActivity(String activityName) {
		createListActivity(activityName, null, null);
	}

	/**
	 * Create an activity with the specified name, style and data
	 * 
	 * @param activityName
	 * @param style
	 * @param publication
	 */
	protected void createListActivity(String activityName,
			String style, List<DataPublicationRequest> publications) {

		if (!isNew) {
			initFields(loadActivity(activityName));
		} else {

			this.activityName = activityName;

			CreateActivityRequest request = CreateActivityRequest
					.createWithNameAndStyle(activityName, style, sessionHandle);
			
			if(publications != null) {
				for(DataPublicationRequest publication : publications) {
					request.addPublication(publication);
				}
			}
			
			for(String rowField : rowFields) {
				request.addField(rowField);
			}
			
			request.setInitialKey(getIntent().getStringExtra(
					ExpanzConstants.INIT_KEY));

			ExpanzCommand.getInstance().execute(request, new ServiceCallback<ActivityResponse>() {

				public void completed(ActivityResponse activity) {
					
					activityUri = activity.getUri();
					initFields(activity);
					
					//TODO get specific datgrid not just first
					if (activity.getData() != null && activity.getData().size() > 0) {
						setListAdapter(new ListSimpleAdapterEx((ListActivityEx)getContextRef(), 
								mapping.getListView(), activity.getData().get(0)));
					}
				}

			});
			
		}

	}

	/**
	 * Create a menu based on the process area map in the session data.
	 * 
	 * @param menuId
	 * @return
	 */
	protected void createMenu() {
		
		if(sessionHandle == null) {
			return;
		}

		GetSessionDataRequest request = new GetSessionDataRequest(sessionHandle);

		ExpanzCommand.getInstance().execute(request,
				new ServiceCallback<SessionResponse>() {

					public void completed(SessionResponse session) {

						mappings.clear();

						if (session.getMenu() == null) {
							return;
						}

					//	for (String menuItem : menuItems) {

							Map<String, ProcessAreaResponse> processAreas = session.getMenu()
									.getProcessAreas();
							
							for(Map.Entry<String, ProcessAreaResponse> entry : processAreas.entrySet()) {
								
								if (session.getMenu() != null
										&& entry.getValue() != null) {

									final List<ProcessAreaActivityResponse> activities = entry.getValue()
											.getActivities();

									for (ProcessAreaActivityResponse activity : activities) {

										ActivityMapping mapping = ActivityMappingHolder
												.getInstance().get(
														activity.getName(),
														activity.getStyle());

										if (mapping != null) {
											mapping.setTitle(activity.getTitle());
											mappings.add(mapping);
										}

									}

								}
								
							}

							

					//	}

					}

				});

	}
	
	/**
	 * Add a header for the listview
	 * 
	 * @param headerLayout
	 */
	protected void addHeader(int headerLayout) {
		
		LayoutInflater inflater = getLayoutInflater();
		View header = inflater.inflate(headerLayout, null, true);
		
		getListView().addHeaderView(header);
		headers.add(header);
	}
	
	/**
	 * Add a footer to the listview
	 * 
	 * @param footerLayout
	 */
	protected void addFooter(int footerLayout) {
		
		LayoutInflater inflater = getLayoutInflater();
		View footer = inflater.inflate(footerLayout, null, true);
		
		getListView().addFooterView(footer);
		footers.add(footer);
	}

	/**
	 * Create a session using a particular user
	 * 
	 * @param username
	 * @param password
	 * @return
	 */
	public void createSession(String username, String password) {

		CreateSessionRequest request = new CreateSessionRequest(username,
				password);

		ExpanzCommand.getInstance().execute(request, new ServiceCallback<SessionResponse>() {

			public void completed(SessionResponse session) {
				
				sessionHandle = session.getSessionHandle();

				if (session.hasMessage()) {
					displayMessages(session.getMessages());
				}

				if (sessionHandle == null) {

					if (getParent() != null) {

						Intent i = new Intent();
						i.putExtra("message", "check credentials");

						getParent().setResult(Activity.RESULT_CANCELED, i);
						finish();
					}

				}

				
			}
			
		});


	}

	/**
	 * Recurse through the headers and footers so they can
	 * be dynamically updated with the data from the expanz server. 
	 */
	protected void initFields() {
		
		for(View view : headers) {
			recurseChildren(view);
		}
		
		for(View view : footers) {
			recurseChildren(view);
		}
		

	}
	
	private void recurseChildren(View view) {
		
		if(view == null) {
			return;
		}
		
		if(view instanceof ViewGroup) {
			
			int childCount = ((ViewGroup) view).getChildCount();
			
			if(childCount > 0) {
				for(int i = 0; i < childCount; i++) {
					recurseChildren(((ViewGroup) view).getChildAt(i));
				}
			}
			
		}
		
		List<ExpanzFieldWidget> existingWidgets = null;
		
		if(view instanceof ExpanzFieldWidget) {
			ExpanzFieldWidget exView = (ExpanzFieldWidget) view;
			
			existingWidgets = fieldWidgets.get(exView.getFieldId());
			
			if(existingWidgets == null) {
				existingWidgets = new ArrayList<ExpanzFieldWidget>();
			}
		}
		
		
		if (view.getClass().equals(TextViewEx.class)) {
			TextViewEx label = (TextViewEx) view;
			List<TextViewEx> existingLabels = fieldLabels.get(label.getFieldId());
			
			if(existingLabels == null) {
				existingLabels = new ArrayList<TextViewEx>();
			}
			
			existingLabels.add(label);
			fieldLabels.put(label.getFieldId(), existingLabels);
		}  else if (view instanceof ExpanzFieldWidget) {
			ExpanzFieldWidget exView = (ExpanzFieldWidget) view;
			existingWidgets.add(exView);
			fieldWidgets.put(exView.getFieldId(), existingWidgets);
		}
		
		if(view instanceof ExpanzFieldWidget) {
			rowFields.add(((ExpanzFieldWidget)view).getFieldId());
		}
	
	}
	
	private void recurseRowView(View view) {
		
		if(view == null) {
			return;
		}
		
		if(view instanceof ViewGroup) {
			
			int childCount = ((ViewGroup) view).getChildCount();
			
			if(childCount > 0) {
				for(int i = 0; i < childCount; i++) {
					recurseRowView(((ViewGroup) view).getChildAt(i));
				}
			}
			
		}
		
		if(view instanceof ExpanzFieldWidget) {
			rowFields.add(((ExpanzFieldWidget)view).getFieldId());
		}
	
	}

	/**
	 * Defines which default message handler mechanism will be used, e.g. Notifications, alerts, toasts
	 * @param messageHandlerType
	 */
	protected void setMessageHandlerType(int messageHandlerType) {
		this.messageHandlerType = messageHandlerType;
	}
	
	public void displayMessages(ActivityResponse response) {
		if(response.hasMessage()) {
			displayMessages(response.getMessages());
		}
	}

	/**
	 * Display a collection of messages using the default message format for the current activity 
	 */
	public void displayMessages(Collection<Message> messages) {
		for(Message message : messages) {
			displayMessage(message);
		}
	}

	/**
	 * Display a message using the default message format for the current activity 
	 */
	public void displayMessage(Message message) {

		if (messageHandlerType == ExpanzConstants.TYPE_NOTIFICATION) {
			NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			Notification notification = new Notification(
					android.R.drawable.star_on, "replace me",
					System.currentTimeMillis());
			// Hide the notification after its selected
			// notification.flags |= Notification.FLAG_AUTO_CANCEL;

			Intent intent = new Intent(this, this.getClass());
			PendingIntent activity = PendingIntent.getActivity(this, 0, intent,
					0);
			notification.setLatestEventInfo(this, "replace me also",
					message.getMessage(), activity);
			notification.number += 1;
			notificationManager.notify(0, notification);

		} else if (messageHandlerType == ExpanzConstants.TYPE_TOAST) {
			Toast.makeText(this, message.getMessage(), Toast.LENGTH_LONG)
					.show();
		} else if (messageHandlerType == ExpanzConstants.TYPE_ALERT) {
			new AlertDialog.Builder(this).setTitle("")
					.setMessage(message.getMessage())
					.setNeutralButton("Close", null).show();
		}

		List<ExpanzFieldWidget> widgets = fieldWidgets.get(message.getSource());

		if (widgets != null) {
			
			for(ExpanzFieldWidget fieldWidget : widgets) {
				
				if (fieldWidget instanceof EditTextEx) {
					
					((EditTextEx)fieldWidget).setError(message.getMessage());
				}
			}
			
		}

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {

		menu.clear();
		int idx = 0;
		for (ActivityMapping mapping : mappings) {
			menu.add(0, idx++, 0, mapping.getTitle());
		}

		return super.onPrepareOptionsMenu(menu);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		ActivityMapping mapping = mappings.get(item.getItemId());
		Intent menuIntent = new Intent(this, mapping.getForm());
		menuIntent.putExtra(ExpanzConstants.SESSION_HANDLE, sessionHandle);
		startActivity(menuIntent);

		return super.onOptionsItemSelected(item);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {

		super.onListItemClick(l, v, position, id);

		DataRow data = (DataRow) getListAdapter().getItem(position - headers.size());

		ContextRequest context = new ContextRequest();
		context.setId(data.getId());
		context.setType(data.getType());

		MenuActionRequest menuAction = new MenuActionRequest();
		menuAction.setDefaultAction(true);

		ActivityRequest request = new ActivityRequest(activityHandle, sessionHandle);
		request.setContext(context);
		request.setMenuAction(menuAction);

		ExpanzCommand.getInstance().execute(request,
				new ServiceCallback<ActivityResponse>() {

					public void completed(ActivityResponse response) {

						ActivityRequestResponse activityRequest = response
								.getActivityRequest();

						if (activityRequest != null) {

							ActivityMapping mapping = ActivityMappingHolder
									.getInstance().get(
											activityRequest.getId(),
											activityRequest.getStyle());

							if (mapping != null) {
								Intent intent = new Intent(getContextRef(),
										mapping.getForm());
								intent.putExtra(ExpanzConstants.SESSION_HANDLE,
										sessionHandle);
								intent.putExtra(ExpanzConstants.INIT_KEY,
										activityRequest.getKey());
								startActivity(intent);
							}
						}
					}

				});

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void onCreateContextMenu(final ContextMenu menu, View v, ContextMenuInfo menuInfo) {

		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;

		DataRow data = (DataRow) getListAdapter().getItem(info.position - headers.size());
		
		ActivityRequest activity = new ActivityRequest(activityHandle, sessionHandle);
		
		ContextRequest context = new ContextRequest();
		context.setType(data.getType());
		context.setId(data.getId());
		
		activity.setContext(context);
		
		MethodRequest method = new MethodRequest();
		method.setName(data.getParent().getContextMenuMethod());
		method.setContextObject(data.getParent().getContextObject());
		
		activity.addMethod(method);

		ExpanzCommand.getInstance().execute(activity,
				new ServiceCallback<ActivityResponse>() {

					public void completed(ActivityResponse response) {
						contextMenu = response.getContextMenu();

						if (contextMenu != null) {
							int idx = 0;
							for (MenuItemResponse item : contextMenu.getItems()) {
								menu.add(Menu.NONE, idx++, idx, item.getText());
							}
						}
					}

				});

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onContextItemSelected(final MenuItem item) {
		
		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
		
		final DataRow data = (DataRow) getListAdapter().getItem(info.position-headers.size());
		
		int menuItemIndex = item.getItemId();
		
		if(contextMenu != null && menuItemIndex < contextMenu.getItems().size()) {
			
			final MenuItemResponse menuItem = contextMenu.getItems().get(menuItemIndex);
			
			ContextRequest context = new ContextRequest();
			context.setId(data.getId());
			context.setType(data.getType());
			context.setContext(data.getParent().getContextObject());
			
			MethodRequest method = new MethodRequest();
			method.setName(menuItem.getAction());
			method.setContextObject(data.getParent().getContextObject());
			
			MenuActionRequest menuAction = new MenuActionRequest();
			menuAction.setDefaultAction(true);
			
			ActivityRequest request = new ActivityRequest(activityHandle, sessionHandle);
			request.setContext(context);
//			request.setMenuAction(menuAction);
			request.addMethod(method);

			ExpanzCommand.getInstance().execute(request,
					new ServiceCallback<ActivityResponse>() {

						public void completed(ActivityResponse response) {
							
							ActivityRequestResponse activityRequest = response.getActivityRequest();
							
							displayMessages(response.getMessages());
							
							if (activityRequest != null) {

								ActivityMapping mapping = ActivityMappingHolder.getInstance()
										.get(activityRequest.getId(), activityRequest.getStyle());

								if (mapping != null) {
									Intent intent = new Intent(getContextRef(), mapping.getForm());
									intent.putExtra(ExpanzConstants.SESSION_HANDLE, sessionHandle);
									intent.putExtra(ExpanzConstants.INIT_KEY, data.getId());
									startActivity(intent);
								}
								
							} else if(menuItem.getTransitionStyle() != null) {
								ActivityMapping mapping = ActivityMappingHolder.getInstance()
										.getTransition(activityName, menuItem.getTransitionStyle());
								
								if (mapping != null) {
									Intent intent = new Intent(getContextRef(), mapping.getForm());
									intent.putExtra(ExpanzConstants.SESSION_HANDLE, sessionHandle);
									intent.putExtra(ExpanzConstants.ACTIVITY_HANDLE, activityHandle);
									intent.putExtra(ExpanzConstants.INIT_KEY, data.getId());
									intent.putExtra(ExpanzConstants.INIT_TYPE, data.getType());
									intent.putExtra(ExpanzConstants.TRANSITION_URI, response.getUri().toString());
									startActivity(intent);
								}
							}
							
						}

					});

			
			
		}
		
		
		return true;
	}
	
	
	public void grabFocusHack() {
		//TODO not yet required for ListActivity
	}

	public void hideKeyboard() {
		//TODO not yet required for ListActivity
	}
	
	/**
	 * Allow widgets etc to capture images using camera
	 */
	public void uploadImage(ImageDetails details) {
		
		imageCaptureAgent = new ImageCaptureAgent(details, activityHandle, sessionHandle, fieldWidgets, this);
		
		try {
			imageCaptureAgent.capture();
		} catch (IOException e) {
			displayMessage(new Message(ExpanzConstants.ERROR, e.getMessage(), null, null));
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
	    super.onActivityResult(requestCode, resultCode, data);
	    switch (requestCode) {
	    case TAKE_PICTURE:
	        if (resultCode == Activity.RESULT_OK) {

				try {

					if(imageCaptureAgent != null) {
						imageCaptureAgent.send();
					}
					
				} catch (Exception e) {
					Toast.makeText(this, "Failed to upload image",
							Toast.LENGTH_SHORT).show();
					e.printStackTrace();
				}
	        }
	    }
	}

}