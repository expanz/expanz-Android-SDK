package com.expanz.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import roboguice.activity.RoboActivity;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.Toast;

import com.expanz.ExpanzApplication;
import com.expanz.ExpanzCommand;
import com.expanz.ServiceCallback;
import com.expanz.model.Message;
import com.expanz.model.entity.Activities;
import com.expanz.model.entity.ImageDetails;
import com.expanz.model.request.ActivityRequest;
import com.expanz.model.request.ContextMenuRequest;
import com.expanz.model.request.ContextRequest;
import com.expanz.model.request.CreateActivityRequest;
import com.expanz.model.request.CreateSessionRequest;
import com.expanz.model.request.DataPublicationRequest;
import com.expanz.model.request.GetSessionDataRequest;
import com.expanz.model.request.MenuActionRequest;
import com.expanz.model.request.MethodRequest;
import com.expanz.model.response.ActivityRequestResponse;
import com.expanz.model.response.ActivityResponse;
import com.expanz.model.response.ContextMenuResponse;
import com.expanz.model.response.Data;
import com.expanz.model.response.DataRow;
import com.expanz.model.response.FieldResponse;
import com.expanz.model.response.MenuItemResponse;
import com.expanz.model.response.ProcessAreaActivityResponse;
import com.expanz.model.response.ProcessAreaResponse;
import com.expanz.model.response.SessionResponse;
import com.expanz.util.ActivityMapping;
import com.expanz.util.ActivityMappingHolder;
import com.expanz.util.ImageCapturer;
import com.expanz.webservice.ActivityHandler;
import com.expanz.widget.ContextMenuAware;
import com.expanz.widget.DataWidgetEx;
import com.expanz.widget.EditTextEx;
import com.expanz.widget.ExpanzFieldWidget;
import com.expanz.widget.ImageViewEx;
import com.expanz.widget.ListViewEx;
import com.google.inject.Inject;
import com.google.inject.Provider;

/**
 * Base class for all non list based Expanz (Android) Activities. 
 * Subclasses of this class should be generated by an IDE and should contain minimal code
 * or no code in the case where tooling support is used.
 * 
 */
public abstract class ActivityEx extends RoboActivity implements MessageListener, ContextEx {
	
	private static final String EXPANZ_SHARED_PREFS = "expanz";

	/**
	 * Constant for camera integration activity result
	 */
	public static final int TAKE_PICTURE = 1;
	
	/**
	 * defines what type of default message display is utilized by this activity
	 */
	private int messageHandlerType = 2;
	
	/**
	 * the expanz activity associated with this android activity
	 */
	protected String activityHandle;
	
	/**
	 * the expanz session this activity belongs to
	 */
	protected String sessionHandle;
	
	/**
	 * The Activity specific data generated from tooling
	 */
	protected ActivityMapping mapping;
	
	/**
	 * Any field widget views that exists as a child of the root view for this activity
	 */
	private Map<String, List<ExpanzFieldWidget>> fieldWidgets = new HashMap<String, List<ExpanzFieldWidget>>();
	
	/**
	 * Data Widgets that are inside the activity's view
	 */
	private Map<String, DataWidgetEx> dataWidgets = new HashMap<String, DataWidgetEx>();
	
	/**
	 * Widgets that are able to display a context menu
	 */
	private List<ContextMenuAware> contextMenuAwareWidgets = new ArrayList<ContextMenuAware>();
	
	/**
	 * the root view for this activity, need so we can recurse child elements
	 */
	private ViewGroup rootLayout;
	
	/**
	 * the mappings for menu items
	 */
	private List<ActivityMapping> mappings = new ArrayList<ActivityMapping>();
	
	/**
	 * Used for lookup of the xml content for the activity
	 */
	private Uri activityUri;
	
	/**
	 * store any properties between activity 
	 */
	private SharedPreferences mPrefs;
	
	
	/**
	 * Is this a newly created android activity, used so we don't recreate an 
	 * activity if the phone orientation is changed etc. 
	 */
	private boolean isNew = true;
	
	/**
	 * Fields of the activity that are media resources, e.g. images
	 */
	private List<String> mediaResourceFields = new ArrayList<String>();
	
	/**
	 * Send images to the server via camera intent.
	 */
	private ImageCapturer imageCapturer;
	
	/**
	 * The fields that are children of this Activity, 
	 * used for optimization
	 */
	private Set<String> includedFields = new HashSet<String>();
	
	/**
	 * for context menu pertaining to a given row
	 */
	private ContextMenuResponse contextMenuResponse;
	
	/**
	 * Holds state of context menu. 
	 * There is no clean way of adding a context menu
	 * to widgets when the menu items happen asynchronously
	 * so this flag is used to determine whether to call back 
	 * and display the menu or retrieve the data from 
	 * the Expanz server
	 */
	private boolean contextMenuInitiated = false;
	
	/**
	 * As above used for Context Menu object. 
	 * 
	 * TODO It would be nicer if the menu response from
	 * the server contained this. 
	 */
	private String contextMenuContextObject;
	
	/**
	 * A default progress dialog
	 */
	private ProgressDialog progress;
	
	@Inject ExpanzApplication application;
	
	@Inject ActivityMappingHolder mappingHolder;
	
	@Inject ExpanzCommand expanzCommand;
	
	@Inject Provider<ImageCapturer> imageCapturerProvider;
	
	@Inject Config config;

	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		
		mPrefs = getSharedPreferences(EXPANZ_SHARED_PREFS, MODE_PRIVATE);
		
		sessionHandle = getIntent().getStringExtra(ExpanzConstants.SESSION_HANDLE);
		
		if(getIntent().getStringExtra(ExpanzConstants.ACTIVITY_HANDLE) != null) {
			activityHandle = getIntent().getStringExtra(ExpanzConstants.ACTIVITY_HANDLE);
		}
		
		//TODO need to invalidate when session/activity times out, i.e. isNew = true
		if(savedInstanceState != null && savedInstanceState.getBoolean(ExpanzConstants.NOT_NEW)) {
			isNew = false;
		} 

		loadMapping();

	}

	/**
	 * Get the field widgets used in this activity
	 */
	public Map<String, List<ExpanzFieldWidget>> getFieldWidgets() {
		return fieldWidgets;
	}
	
	/**
	 * Return a reference to this object for inner classes 
	 * @return
	 */
	public Context getContextRef() {
		return this;
	}
	
	/**
	 * Set the state of the current activity object with configuration data, from the tooling
	 */
	protected void loadMapping() {
		
		mapping = mappingHolder.getByForm(this.getClass().getName());

		if(mapping.getContentView() != null) {
			setContentView(mapping.getContentView());
		}
		
		if(mapping.getRootLayout() != null) {
			setRootLayout(mapping.getRootLayout());
		}
		
		if(mapping.getMessageHandlerType() != null) {
			setMessageHandlerType(mapping.getMessageHandlerType());
		}
		
		createMenu();
		
		initFields(); 
		
		if(mapping.isCreateActivity()) {
			createActivity(mapping.getExpanzActivityName(), mapping.getStyle(), mapping.getPublications());
		}
		
	}
	
	/**
	 * the handle for the "expanz" activity associated with this android activity 
	 * 
	 * @return
	 */
	public String getActivityHandle() {
		return activityHandle;
	}

	public void setActivityHandle(String activityHandle) {
		this.activityHandle = activityHandle;
	}

	/**
	 * The handle of the current expanz session
	 * 
	 * @return
	 */
	public String getSessionHandle() {
		return sessionHandle;
	}

	public void setSessionHandle(String sessionHandle) {
		this.sessionHandle = sessionHandle;
	}
	
	/**
	 * Load an activity from local store, i.e. in place of creating it
	 * 
	 * @param activityName
	 */
	protected ActivityResponse loadActivity(String activityName) {
		
		ActivityResponse activity = null;
		
		String activityUriString = getIntent().getStringExtra(ExpanzConstants.TRANSITION_URI);
		
		if(activityUriString == null) {
			activityUriString = mPrefs.getString(ExpanzConstants.ACTIVITY_URI, null);
		}
		
		if(activityUriString != null) {
			
			activityUri = Uri.parse(activityUriString);
			
			Cursor cursor = managedQuery(activityUri,
					new String[] { Activities.ActivityEntity.PAYLOAD }, 
					null, null, null);
			
			if(cursor.moveToFirst()) {
				
				String payload = cursor.getString(cursor.getColumnIndex(Activities.ActivityEntity.PAYLOAD));
				
				if(payload != null) {
					ActivityHandler handler = new ActivityHandler();
					activity = handler.parse(payload);
					initFields(activity);
				}
				
			}
			
		}
		
		return activity;
		
	}
	
	/**
	 * Create an activity with the specified name
	 * 
	 * @param activityName
	 */
	protected void createActivity(String activityName) {
		createActivity(activityName, null, null);
	}
	
	/**
	 * Create an activity with the specified name, style and data
	 * 
	 * @param activityName
	 * @param style
	 * @param publications
	 */
	protected void createActivity(String activityName, String style,
			List<DataPublicationRequest> publications) {

		ActivityResponse activity = null;
		
		//TODO make message configurable
		showProgress("loading data");

		if (!isNew) {
			activity = loadActivity(activityName);
			initFields(activity);
		} else {

			CreateActivityRequest request = CreateActivityRequest
					.createWithNameAndStyle(activityName, style, sessionHandle);
			
			for(DataPublicationRequest publication : publications) {
				request.addPublication(publication);
			}
			
			for(Map.Entry<String, DataWidgetEx> entry : dataWidgets.entrySet()) {
				request.addPublication(entry.getValue().toPublication());
			}
			
			request.addMediaResourceFields(mediaResourceFields);
			request.setInitialKey(getIntent().getStringExtra(ExpanzConstants.INIT_KEY));
			
			for(String rowField : includedFields) {
				request.addField(rowField);
			}

			expanzCommand.execute(request, new ServiceCallback<ActivityResponse>() {

				public void completed(ActivityResponse response) {
					
					// TODO Auto-generated method stub
					activityUri = response.getUri();
					initFields(response);
					
					hideProgress();
				}
				
			});
			
		}

	}
	
	/**
	 * Set up any field etc
	 * 
	 * @param activity
	 */
	public void initFields(ActivityResponse activity) {
		
	
		if(activity.getUri() != null) {
			activityUri = activity.getUri();
		}
		
		for(FieldResponse field : activity.getFields()) {

			List<ExpanzFieldWidget> widgets = fieldWidgets.get(field.getId());
			
			if (widgets != null) {

				for (ExpanzFieldWidget widget : widgets) {
					
					widget.setField(field);
				}

			}
			
		}
		
		for(Data data : activity.getData()) {
			
			DataWidgetEx dataWidget = dataWidgets.get(data.getId());
			
			if(dataWidget != null) {
				dataWidget.updateData(data);
			}
			
		}
		
		activityHandle = activity.getHandle();
		
		if(activity.hasMessage()) {
			displayMessages(activity.getMessages());
		}
		
		ActivityRequestResponse activityRequest = activity
				.getActivityRequest();

		if (activityRequest != null) {

			ActivityMapping mapping = mappingHolder.get(
							activityRequest.getId(),
							activityRequest.getStyle());

			if (mapping != null) {
				Intent intent = new Intent(getContextRef(),
						mapping.getForm());
				intent.putExtra(ExpanzConstants.SESSION_HANDLE,
						sessionHandle);
				intent.putExtra(ExpanzConstants.INIT_KEY,
						activityRequest.getKey());
				startActivity(intent);
			}
		}
		
	}
	
	
	/**{@inheritDoc} */
	@Override
	protected void onPause() {
		
		if (progress != null) {
        	progress.dismiss();
        }
		
		if(activityUri != null) {
			SharedPreferences.Editor editor = mPrefs.edit();
			editor.putString(ExpanzConstants.ACTIVITY_URI, activityUri.toString());
			editor.commit();
		}
		
		for(ContextMenuAware contextAware : contextMenuAwareWidgets) {
			unregisterForContextMenu(contextAware.getView());
		}
		
		super.onPause();
	}

	/**{@inheritDoc} */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		outState.putBoolean(ExpanzConstants.NOT_NEW, true);
		super.onSaveInstanceState(outState);
	}
	
	/**
	 * Create a menu based on the process area map in the session data.
	 * 
	 * @param menuId
	 * @return
	 */
	protected void createMenu() {
		
		if(sessionHandle == null) {
			return;
		}

		GetSessionDataRequest request = new GetSessionDataRequest(sessionHandle);

		expanzCommand.execute(request, new ServiceCallback<SessionResponse>() {

			public void completed(SessionResponse session) {

				mappings.clear();

				if (session.getMenu() == null) {
					return;
				}

				Map<String, ProcessAreaResponse> processAreas = session
						.getMenu().getProcessAreas();

				for (Map.Entry<String, ProcessAreaResponse> entry : processAreas
						.entrySet()) {

					if (session.getMenu() != null && entry.getValue() != null) {

						final List<ProcessAreaActivityResponse> activities = entry
								.getValue().getActivities();

						for (ProcessAreaActivityResponse activity : activities) {

							ActivityMapping mapping = mappingHolder.get(
									activity.getName(), activity.getStyle());

							if (mapping != null) {
								mapping.setTitle(activity.getTitle());
								mappings.add(mapping);
							}

						}

					}

				}

			}

		});

	}
	
	/**
	 * Create a session for a given user
	 * 
	 * @param username
	 * @param password
	 * @return
	 */
	public void createSession(String username, String password, boolean guest, final ServiceCallback<SessionResponse> callback) {
		
		CreateSessionRequest request = new CreateSessionRequest(config, username, password);
	
		if(guest) {
			request.setAuthenticationMode("guest");
		}
		
		expanzCommand.execute(request, 
				new ServiceCallback<SessionResponse>() {

			public void completed(SessionResponse session) {
				
				sessionHandle = session.getSessionHandle();
				
				if(session.hasMessage()) {
					displayMessages(session.getMessages());
				}
				
				if(sessionHandle == null) {
					
					if(getParent() != null) {
						
						Intent i = new Intent();
						i.putExtra("message", "server error, check credentials/network");
						
						getParent().setResult(Activity.RESULT_CANCELED, i);
						finish();
					} 
					
				} 
				
				if(callback != null) {
					callback.completed(session);
				}
				
			}
			
		});
		
		
	}
	
	/**
	 * Recurse through the child views so they can be dynamically updated with the data from the expanz server. 
	 */
	protected void initFields() {

		if (rootLayout != null) {
			recurseChildren(rootLayout, null);
		}

	}
	
	/**
	 * Recurse each parent view and extract widgets.
	 * 
	 * @param view the parent
	 */
	private void recurseChildren(View view, String contextObject) {
		
		if(view == null) {
			return;
		}
		
		if(view instanceof ViewGroup) {
			
			int childCount = ((ViewGroup) view).getChildCount();
			
			if(childCount > 0) {
				for(int i = 0; i < childCount; i++) {
					recurseChildren(((ViewGroup) view).getChildAt(i), contextObject);
				}
			}
			
		}
		
		List<ExpanzFieldWidget> existingWidgets = null;
		
		if(view instanceof ExpanzFieldWidget) {
			ExpanzFieldWidget exView = (ExpanzFieldWidget) view;
			
			existingWidgets = fieldWidgets.get(exView.getFieldId());
			
			if(existingWidgets == null) {
				existingWidgets = new ArrayList<ExpanzFieldWidget>();
			}
		}
			
		//TODO create media resource interface
		if (view instanceof ImageViewEx) {
			ExpanzFieldWidget exView = (ExpanzFieldWidget) view;
			existingWidgets.add(exView);
			fieldWidgets.put(exView.getFieldId(), existingWidgets);
			mediaResourceFields.add(exView.getFieldId());
		} else if (view instanceof ExpanzFieldWidget) {
			ExpanzFieldWidget exView = (ExpanzFieldWidget) view;
			existingWidgets.add(exView);
			fieldWidgets.put(exView.getFieldId(), existingWidgets);
		} else if (view instanceof ListViewEx) {
			ListViewEx listView = (ListViewEx) view;
			View rowView = getLayoutInflater().inflate(listView.getRowLayout(), null, true);
			recurseChildren(rowView, listView.getContextObject());
		}
		
		if(view instanceof ExpanzFieldWidget) {
			
			String fieldId = (contextObject != null) ? (contextObject + ".") : "";
			fieldId = fieldId + ((ExpanzFieldWidget)view).getFieldId();
			
			includedFields.add(fieldId);
		}
		
		if(view instanceof DataWidgetEx) {
			
			DataWidgetEx dataWidget = (DataWidgetEx) view;
			
			dataWidgets.put(dataWidget.getDataId(), dataWidget);
		}
		
		if(view instanceof ContextMenuAware) {
			ContextMenuAware contextMenuAware = (ContextMenuAware) view;
			
			if(contextMenuAware.isMenuEnabled()) {
				contextMenuAwareWidgets.add(contextMenuAware);
				registerForContextMenu(contextMenuAware.getView());
			}
		}
	}
	
	/**
	 * Used so we can get access to the root view so it can be recursed
	 * 
	 * @param layoutId
	 */
	protected void setRootLayout(int layoutId) {
		rootLayout = (ViewGroup) findViewById(layoutId);
		rootLayout.setFocusable(true);
		rootLayout.setFocusableInTouchMode(true);
	}
	
	/**
	 * Defines which default message handler mechanism will be used, e.g. Notifications, alerts, toasts
	 * @param messageHandlerType
	 */
	protected void setMessageHandlerType(int messageHandlerType) {
		this.messageHandlerType = messageHandlerType;
	}
	
	public void hideKeyboard() {
		
		if(rootLayout != null) {
			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(rootLayout.getWindowToken(), 0);
		}
	}
	
	/**
	 * Display a collection of messages using the default message format for the current activity 
	 */
	public void displayMessages(Collection<Message> messages) {
		for(Message message : messages) {
			displayMessage(message);
		}
	}

	/**
	 * Display a message using the default message format for the current activity 
	 */
	public void displayMessage(Message message) {
		
		if(messageHandlerType == ExpanzConstants.TYPE_NOTIFICATION) {
			NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			Notification notification = new Notification(android.R.drawable.star_on,
					"replace me", System.currentTimeMillis());
			// Hide the notification after its selected
			//notification.flags |= Notification.FLAG_AUTO_CANCEL;

			Intent intent = new Intent(this, this.getClass());
			PendingIntent activity = PendingIntent.getActivity(this, 0, intent, 0);
			notification.setLatestEventInfo(this, "replace me also",
					message.getMessage(), activity);
			notification.number += 1;
			notificationManager.notify(0, notification);
			
			
		} else if (messageHandlerType == ExpanzConstants.TYPE_TOAST) {
		    Toast.makeText(this, message.getMessage(), Toast.LENGTH_LONG).show();
		} else if (messageHandlerType == ExpanzConstants.TYPE_ALERT) {
			if(!isFinishing()) {
				new AlertDialog.Builder(this).setTitle("").setMessage(message.getMessage()).setNeutralButton("Close", null).show();
			}
		}
		
		List<ExpanzFieldWidget> widgets = fieldWidgets.get(message.getSource());

		
		if (widgets != null) {
			
			for(ExpanzFieldWidget fieldWidget : widgets) {
				
				if (fieldWidget instanceof EditTextEx) {
					
					((EditTextEx)fieldWidget).setError(message.getMessage());
				}
			}
			
		}
		
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {

		menu.clear();
		int idx = 0;
		for(ActivityMapping mapping : mappings) {
			menu.add(0, idx++, 0, mapping.getTitle());
		}

		
		return super.onPrepareOptionsMenu(menu);
		
	}
	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		
		ActivityMapping mapping = mappings.get(item.getItemId());
		Intent menuIntent = new Intent(this, mapping.getForm());
		menuIntent.putExtra(ExpanzConstants.SESSION_HANDLE, sessionHandle);
		startActivity(menuIntent);
		
		return super.onOptionsItemSelected(item);
	}
	
	/**
	 * hack to get around android focus button bug pre android 3.0
	 */
	public void grabFocusHack() {
		
		rootLayout.requestFocusFromTouch();
	}
	
	/**
	 * Allow child widgets to upload images.
	 */
	public void uploadImage(ImageDetails details) {
		
		imageCapturer = imageCapturerProvider.get();
		try {
			imageCapturer.capture(details, activityHandle, sessionHandle, fieldWidgets, this);
		} catch (IOException e) {
			displayMessage(new Message(ExpanzConstants.ERROR, e.getMessage(), null, null));
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
	    super.onActivityResult(requestCode, resultCode, data);
	    switch (requestCode) {
	    case TAKE_PICTURE:
	        if (resultCode == Activity.RESULT_OK) {

				try {

					if(imageCapturer != null) {
						imageCapturer.send();
					}
					
				} catch (Exception e) {
					Toast.makeText(this, "Failed to upload image",
							Toast.LENGTH_SHORT).show();
					e.printStackTrace();
				}
	        }
	    }
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void onCreateContextMenu(final ContextMenu menu, final View v, ContextMenuInfo menuInfo) {
		
		if(contextMenuInitiated) {
			contextMenuInitiated = false;
		
			if (contextMenuResponse != null) {
				
				int idx = 0;
				
				for (MenuItemResponse item : contextMenuResponse.getItems()) {
					menu.add(Menu.NONE, idx++, idx, item.getText());
				}
				
				super.onCreateContextMenu(menu, v, menuInfo);
			}
			
			
		} else {
			asyncContextMenu(menu, v, menuInfo);
		}
		
		
	}
	
	/**
	 * Maybe a hack, can't find a better way of asynchronously updating
	 * the context menu. This method calls back to onCreateContextMenu.
	 * Maybe this is how google anticipate it should be done but can't
	 * find any documentation detailing how to handle async updates of 
	 * the context menu. 
	 * 
	 * 
	 * @param menu the menu to add items to
	 * @param v the contextual view
	 * @param menuInfo the menu details
	 */
	private void asyncContextMenu(final ContextMenu menu, final View v, ContextMenuInfo menuInfo) {
		
		DataWidgetEx dataWidget = null;
		
		if(v instanceof DataWidgetEx) {
			dataWidget = (DataWidgetEx) v;
		} else { 
			return;
		}
		
		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;

		DataRow data = (DataRow) dataWidget.getListAdapter().getItem(info.position);
		
		ActivityRequest activity = new ActivityRequest(activityHandle, sessionHandle);
		
		ContextRequest context = new ContextRequest();
		context.setType(data.getType());
		context.setId(data.getId());
		
		activity.setContext(context);
		
		if(data.getParent().getContextMenuMethod() != null) {
			MethodRequest method = new MethodRequest();
			method.setName(data.getParent().getContextMenuMethod());
			method.setContextObject(data.getParent().getContextObject());
			contextMenuContextObject = method.getContextObject();
			activity.addMethod(method);
		} else {
			
			ContextMenuRequest contextMenu = new ContextMenuRequest();
			contextMenu.setContextObject(dataWidget.getContextObject());
			contextMenuContextObject = contextMenu.getContextObject();
			activity.setContextMenu(contextMenu);
		}
		
		expanzCommand.execute(activity,
				new ServiceCallback<ActivityResponse>() {

					public void completed(ActivityResponse response) {
						contextMenuResponse = response.getContextMenu();

						if (contextMenuResponse != null) {
							
							contextMenuInitiated = true;
							openContextMenu(v);
						
						}
					
					}

				});
		
	}
	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean onContextItemSelected(final MenuItem item) {
		
		if (contextMenuResponse == null) {
			return false;
		}
			
		String action = null;
		
		
		for (MenuItemResponse response : contextMenuResponse.getItems()) {
			if(item.getTitle().equals(response.getText())) {
				action = response.getAction();
			}
		}
		
		if(action == null || contextMenuContextObject == null) {
			return false;
		}
	
		
		MenuActionRequest menuAction = new MenuActionRequest();
		
		menuAction.setAction(action);
		menuAction.setContext(contextMenuContextObject);
		
		ActivityRequest request = new ActivityRequest(activityHandle, sessionHandle);
		
		request.setMenuAction(menuAction);
			
		expanzCommand.execute(request,
					new ServiceCallback<ActivityResponse>() {

						public void completed(ActivityResponse response) {
							
							initFields(response);
							
						}

					});
			
		
		return true;
	}
	
	/**
	 * Show a simple progress dialog
	 */
	public void showProgress(String message) {
		
		if(isFinishing()) {
			return;
		}
		
        if (progress == null) {
        	progress = new ProgressDialog(this);
        	progress.setIndeterminate(true);
        }

        
        progress.setMessage(message);
        progress.show();
        
    }

	/**
	 * Hide progress dialog if showing
	 */
    public void hideProgress() {
    	
    	if(isFinishing()) {
			return;
		}
    	
        if (progress != null) {
        	progress.dismiss();
        }
    }

    /**
     * Returns the mapping holder, available here as difficult to inject 
     * things into widgets
     */
	public ActivityMappingHolder getMappingHolder() {
		return mappingHolder;
	}
	
	/**
	 * Returns the command, available here as difficult to inject 
     * things into widgets
	 */
	public ExpanzCommand getCommand() {
		return expanzCommand;
	}
	

}
